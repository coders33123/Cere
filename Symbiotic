from locust import events, HttpUser, task, between, Query
from collections import defaultdict
import threading
import os
import sys
import time

# Validate environment configuration
API_URL = os.getenv("API_URL")
if not API_URL:
    print("Error: API_URL environment variable is not set.")
    sys.exit(1)

# Custom metrics dictionary
custom_metrics = defaultdict(lambda: {"success": 0, "failure": 0, "response_times": []})

@events.request.add_listener
def on_request(request_type, name, response_time, response_length, **kwargs):
    if kwargs.get("exception"):
        custom_metrics[name]["failure"] += 1
    else:
        custom_metrics[name]["success"] += 1
        custom_metrics[name]["response_times"].append(response_time)

def report_custom_metrics():
    for task_name, metrics in custom_metrics.items():
        total = metrics["success"] + metrics["failure"]
        success_rate = (metrics["success"] / total) * 100 if total > 0 else 0
        avg_response_time = (sum(metrics["response_times"]) / len(metrics["response_times"])
                             if metrics["response_times"] else 0)
        # Report these custom metrics to Locust's stats using the request_success event (hacky but effective)
        events.request_success.fire(
            request_type="Custom",
            name=f"{task_name} - Success Rate",
            response_time=success_rate,
            response_length=0,
        )
        events.request_success.fire(
            request_type="Custom",
            name=f"{task_name} - Avg Response Time",
            response_time=avg_response_time,
            response_length=0,
        )
        print(f"Custom Metric for {task_name}: Success Rate: {success_rate:.2f}%, Avg Response Time: {avg_response_time:.2f}ms")

class CustomMetricsTimer:
    def __init__(self, interval):
        self.interval = interval
        self.timer = None
        self.start()

    def report_custom_metrics(self):
        for task_name, metrics in custom_metrics.items():
            total = metrics["success"] + metrics["failure"]
            success_rate = (metrics["success"] / total) * 100 if total > 0 else 0
            avg_response_time = (sum(metrics["response_times"]) / len(metrics["response_times"])
                                 if metrics["response_times"] else 0)
            events.request_success.fire(
                request_type="Custom",
                name=f"{task_name} - Success Rate",
                response_time=success_rate,
                response_length=0,
            )
            events.request_success.fire(
                request_type="Custom",
                name=f"{task_name} - Avg Response Time",
                response_time=avg_response_time,
                response_length=0,
            )
            print(f"Custom Metric for {task_name}: Success Rate: {success_rate:.2f}%, Avg Response Time: {avg_response_time:.2f}ms")

    def run(self):
        self.report_custom_metrics()
        self.start()

    def start(self):
        self.timer = threading.Timer(self.interval, self.run)
        self.timer.daemon = True  # Allows the main thread to exit even if the timer is running
        self.timer.start()

@events.init.add_listener
def on_locust_init(environment, **kwargs):
    # Start the timer to report custom metrics every 10 seconds
    CustomMetricsTimer(interval=10)

class MyUser(HttpUser):
    host = API_URL
    wait_time = between(1, 3)

    @task(5)  # Browse products: Simulates users browsing the product catalog
    def browse_products(self):
        self.client.get("/products")

    @task(3)
    def view_product(self):
        product_ids = list(range(1, 101))
        product_id = random.choice(product_ids)
        self.client.get(f"/products/{product_id}")

    @task(1)
    def place_order(self):
        product_ids = list(range(1, 101))
        product_id = random.choice(product_ids)
        quantity = random.randint(1, 3)
        order_data = {"product_id": product_id, "quantity": quantity}
        with self.client.post("/orders", json=order_data, catch_response=True) as response:
            if response.elapsed.total_seconds() > 2:
                response.failure(f"Response time {response.elapsed.total_seconds()}s exceeds threshold")
            else:
                response.success()

# Run tests as usual:
# 1. Set API_URL environment variable (e.g., export API_URL="http://localhost:8000")
# 2. Run Locust: locust --user-type free (or paid)
